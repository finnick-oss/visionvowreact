{"ast":null,"code":"var _jsxFileName = \"E:\\\\react project\\\\visionvow\\\\src\\\\status\\\\CompletedPage.js\",\n  _s = $RefreshSig$();\nimport React from 'react';\nimport Dashboard from '../statics/Dashboard';\nimport { useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst CompletedPage = ({\n  location\n}) => {\n  _s();\n  const [ipAddress, setIPAddress] = useState('');\n  useEffect(() => {\n    fetch('https://geolocation-db.com/json/').then(response => response.json()).then(data => {\n      setIPAddress(data.IPv4);\n    }).catch(error => console.log(error));\n  }, []);\n  useEffect(() => {\n    // Extract pid and uid from URL parameters\n    const searchParams = ipAddress;\n    const pid = searchParams.get('pid');\n    const uid = searchParams.get('uid');\n    const status = 'Completed';\n    const completionTime = new Date().toISOString().slice(0, 10);\n    if (pid && uid && ipAddress) {\n      const newData = {\n        pid,\n        uid,\n        ip: ipAddress,\n        status,\n        completionTime // Include completionTime in newData\n      };\n      console.log('New Data:', newData); // Log newData to console\n\n      // Send data to backend\n      fetch('http://localhost:8083/survey', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(newData)\n      }).then(response => {\n        if (response.ok) {\n          console.log('Data saved successfully');\n        } else {\n          console.error('Failed to save data');\n        }\n      }).catch(error => {\n        console.error('Error saving data:', error);\n      });\n    }\n  }, [location.search, ipAddress]); // Include ipAddress in the dependency array\n\n  // Render the Dashboard component with pid, uid, and status\n  return /*#__PURE__*/_jsxDEV(Dashboard, {\n    pid: pid,\n    uid: uid,\n    status: \"complete\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 71,\n    columnNumber: 5\n  }, this);\n};\n_s(CompletedPage, \"V2OzCcCrlcc644rgeRCzM+p1EXQ=\");\n_c = CompletedPage;\nexport default CompletedPage;\nvar _c;\n$RefreshReg$(_c, \"CompletedPage\");","map":{"version":3,"names":["React","Dashboard","useState","useEffect","jsxDEV","_jsxDEV","CompletedPage","location","_s","ipAddress","setIPAddress","fetch","then","response","json","data","IPv4","catch","error","console","log","searchParams","pid","get","uid","status","completionTime","Date","toISOString","slice","newData","ip","method","headers","body","JSON","stringify","ok","search","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["E:/react project/visionvow/src/status/CompletedPage.js"],"sourcesContent":["import React from 'react';\r\nimport Dashboard from '../statics/Dashboard';\r\nimport { useState, useEffect } from 'react';\r\n\r\nconst CompletedPage = ({ location }) => {\r\n  \r\n\r\n  const [ipAddress, setIPAddress] = useState('');\r\n  \r\n  useEffect(() => {\r\n    fetch('https://geolocation-db.com/json/')\r\n      .then(response => response.json())\r\n      .then(data => {\r\n        setIPAddress(data.IPv4);\r\n      })\r\n      .catch(error => console.log(error));\r\n  }, []);\r\n\r\n\r\n\r\n  useEffect(() => {\r\n\r\n      // Extract pid and uid from URL parameters\r\n  const searchParams = ipAddress;\r\n  const pid = searchParams.get('pid');\r\n  const uid = searchParams.get('uid');\r\n  const status = 'Completed';\r\n  const completionTime=new Date().toISOString().slice(0, 10)\r\n\r\n    if (pid && uid && ipAddress ) {\r\n      const newData = {\r\n        pid,\r\n        uid,\r\n        ip: ipAddress,\r\n        status,\r\n        completionTime , // Include completionTime in newData\r\n      };\r\n  \r\n      console.log('New Data:', newData); // Log newData to console\r\n  \r\n      \r\n      // Send data to backend\r\n      fetch('http://localhost:8083/survey', {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json'\r\n        },\r\n        body: JSON.stringify(newData)\r\n      })\r\n      .then(response => {\r\n        if (response.ok) {\r\n          console.log('Data saved successfully');\r\n        } else {\r\n          console.error('Failed to save data');\r\n        }\r\n      })\r\n      .catch(error => {\r\n        console.error('Error saving data:', error);\r\n      });\r\n    }\r\n  }, [location.search, ipAddress]); // Include ipAddress in the dependency array\r\n  \r\n\r\n\r\n\r\n\r\n\r\n \r\n  // Render the Dashboard component with pid, uid, and status\r\n  return (\r\n    <Dashboard pid={pid} uid={uid} status=\"complete\" />\r\n  );\r\n};\r\n\r\nexport default CompletedPage;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,OAAOC,SAAS,MAAM,sBAAsB;AAC5C,SAASC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE5C,MAAMC,aAAa,GAAGA,CAAC;EAAEC;AAAS,CAAC,KAAK;EAAAC,EAAA;EAGtC,MAAM,CAACC,SAAS,EAAEC,YAAY,CAAC,GAAGR,QAAQ,CAAC,EAAE,CAAC;EAE9CC,SAAS,CAAC,MAAM;IACdQ,KAAK,CAAC,kCAAkC,CAAC,CACtCC,IAAI,CAACC,QAAQ,IAAIA,QAAQ,CAACC,IAAI,CAAC,CAAC,CAAC,CACjCF,IAAI,CAACG,IAAI,IAAI;MACZL,YAAY,CAACK,IAAI,CAACC,IAAI,CAAC;IACzB,CAAC,CAAC,CACDC,KAAK,CAACC,KAAK,IAAIC,OAAO,CAACC,GAAG,CAACF,KAAK,CAAC,CAAC;EACvC,CAAC,EAAE,EAAE,CAAC;EAINf,SAAS,CAAC,MAAM;IAEZ;IACJ,MAAMkB,YAAY,GAAGZ,SAAS;IAC9B,MAAMa,GAAG,GAAGD,YAAY,CAACE,GAAG,CAAC,KAAK,CAAC;IACnC,MAAMC,GAAG,GAAGH,YAAY,CAACE,GAAG,CAAC,KAAK,CAAC;IACnC,MAAME,MAAM,GAAG,WAAW;IAC1B,MAAMC,cAAc,GAAC,IAAIC,IAAI,CAAC,CAAC,CAACC,WAAW,CAAC,CAAC,CAACC,KAAK,CAAC,CAAC,EAAE,EAAE,CAAC;IAExD,IAAIP,GAAG,IAAIE,GAAG,IAAIf,SAAS,EAAG;MAC5B,MAAMqB,OAAO,GAAG;QACdR,GAAG;QACHE,GAAG;QACHO,EAAE,EAAEtB,SAAS;QACbgB,MAAM;QACNC,cAAc,CAAG;MACnB,CAAC;MAEDP,OAAO,CAACC,GAAG,CAAC,WAAW,EAAEU,OAAO,CAAC,CAAC,CAAC;;MAGnC;MACAnB,KAAK,CAAC,8BAA8B,EAAE;QACpCqB,MAAM,EAAE,MAAM;QACdC,OAAO,EAAE;UACP,cAAc,EAAE;QAClB,CAAC;QACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACN,OAAO;MAC9B,CAAC,CAAC,CACDlB,IAAI,CAACC,QAAQ,IAAI;QAChB,IAAIA,QAAQ,CAACwB,EAAE,EAAE;UACflB,OAAO,CAACC,GAAG,CAAC,yBAAyB,CAAC;QACxC,CAAC,MAAM;UACLD,OAAO,CAACD,KAAK,CAAC,qBAAqB,CAAC;QACtC;MACF,CAAC,CAAC,CACDD,KAAK,CAACC,KAAK,IAAI;QACdC,OAAO,CAACD,KAAK,CAAC,oBAAoB,EAAEA,KAAK,CAAC;MAC5C,CAAC,CAAC;IACJ;EACF,CAAC,EAAE,CAACX,QAAQ,CAAC+B,MAAM,EAAE7B,SAAS,CAAC,CAAC,CAAC,CAAC;;EAQlC;EACA,oBACEJ,OAAA,CAACJ,SAAS;IAACqB,GAAG,EAAEA,GAAI;IAACE,GAAG,EAAEA,GAAI;IAACC,MAAM,EAAC;EAAU;IAAAc,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAE,CAAC;AAEvD,CAAC;AAAClC,EAAA,CApEIF,aAAa;AAAAqC,EAAA,GAAbrC,aAAa;AAsEnB,eAAeA,aAAa;AAAC,IAAAqC,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}